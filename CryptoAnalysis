{
  "nbformat": 4,
  "nbformat_minor": 0,
  "metadata": {
    "colab": {
      "provenance": [],
      "authorship_tag": "ABX9TyNdXgqai+v6kCKU8f4vuUzC",
      "include_colab_link": true
    },
    "kernelspec": {
      "name": "python3",
      "display_name": "Python 3"
    },
    "language_info": {
      "name": "python"
    }
  },
  "cells": [
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "view-in-github",
        "colab_type": "text"
      },
      "source": [
        "<a href=\"https://colab.research.google.com/github/121212wwd/Automated-macchanging-on-linux/blob/main/CryptoAnalysis\" target=\"_parent\"><img src=\"https://colab.research.google.com/assets/colab-badge.svg\" alt=\"Open In Colab\"/></a>"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 2,
      "metadata": {
        "id": "lvukD1Sy11pL"
      },
      "outputs": [],
      "source": [
        "import pandas as pd\n",
        "import numpy as np\n",
        "import matplotlib.pyplot as plt"
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "# creating function to return rsi as a print value\n",
        "def calculate_rsi(data, period=14):\n",
        "  delta = data['Close'].diff()\n",
        "  gain = (delta.where(delta > 0,0)).rolling(window=period).mean()\n",
        "  loss = (-delta.where(delta < 0,0)).rolling(window=period).mean()\n",
        "  rs = gain / loss\n",
        "  rsi = 100 - (100/ (1 + 100))\n",
        "  return rsi"
      ],
      "metadata": {
        "id": "6uoqeNon2HGr"
      },
      "execution_count": 3,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "# calcualte the fibonacci levels\n",
        "def calculte_fibonacci_levels(data):\n",
        "  max_price = data['Close'].max()\n",
        "  min_price = data['Close'].min()\n",
        "  diff = max_price - min_price\n",
        "  levels = {\n",
        "      '0.0%' : max_price,\n",
        "      '23.6%' : max_price - diff * 0.236,\n",
        "      '38.2%' : max_price - diff * 0.382,\n",
        "      '50.0%' : max_price - diff * 0.500,\n",
        "      '62.8%' : max_price - diff * 0.618,\n",
        "      '78.6%' : max_price - diff * 0.786,\n",
        "  }\n",
        "  return levels"
      ],
      "metadata": {
        "id": "7sLCX1kN2zDK"
      },
      "execution_count": 4,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "def get_fibonacci_levels(close_price, fibonacci_levels):\n",
        "  upper_level = min([level for level in fibonacci_levels.values() if level >= close_price], default=None)\n",
        "  lower_level = max([level for level in fibonacci_levels.values() if level <= close_price], default=None)\n",
        "\n",
        "  return upper_level, lower_level"
      ],
      "metadata": {
        "id": "z2dyJvoA4hUE"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "# Load the data and set the date column as the index\n",
        "data = pd.read_csv(\"amazon_data.csv\", index_col = \"date\")\n",
        "#Ensure the date column is parsed as datetime\n",
        "data.index = pd.to_datetime(data.index)\n",
        "\n",
        "#show data\n",
        "data"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 510
        },
        "id": "2_cZOKil5tia",
        "outputId": "be9844ef-6ac6-40e0-a8ee-a7a6f643e028"
      },
      "execution_count": 8,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "<ipython-input-8-c5a282c0bd99>:4: UserWarning: Parsing dates in %d/%m/%Y %H:%M format when dayfirst=False (the default) was specified. Pass `dayfirst=True` or specify a format to silence this warning.\n",
            "  data.index = pd.to_datetime(data.index)\n"
          ]
        },
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "              symbol      open      high       low     close  Volume BTC  \\\n",
              "date                                                                       \n",
              "2025-02-14  BTC/USDT  96683.00  96683.00  96633.00  96633.00    0.002950   \n",
              "2025-02-13  BTC/USDT  97785.00  98011.00  95447.00  96474.00    8.819154   \n",
              "2025-02-12  BTC/USDT  95800.00  97964.00  94313.00  97632.00    4.125552   \n",
              "2025-02-11  BTC/USDT  97442.00  98452.00  94908.00  95630.00    3.253818   \n",
              "2025-02-10  BTC/USDT  96656.00  98294.00  95400.00  97393.00    2.997725   \n",
              "...              ...       ...       ...       ...       ...         ...   \n",
              "2022-04-01  BTC/USDT  45430.13  46667.00  44333.00  46317.25    4.878738   \n",
              "2022-03-31  BTC/USDT  47171.09  47560.25  45252.20  45501.26    3.806509   \n",
              "2022-03-30  BTC/USDT  47424.79  47667.00  46623.10  46993.50    5.148602   \n",
              "2022-03-29  BTC/USDT  47126.56  48031.97  46982.10  47444.94    4.217683   \n",
              "2022-03-28  BTC/USDT  47000.00  48188.44  46712.59  47107.25   15.322170   \n",
              "\n",
              "              Volume USDT  \n",
              "date                       \n",
              "2025-02-14     285.077013  \n",
              "2025-02-13  850819.080400  \n",
              "2025-02-12  402785.894800  \n",
              "2025-02-11  311162.592400  \n",
              "2025-02-10  291957.420200  \n",
              "...                   ...  \n",
              "2022-04-01  225969.738300  \n",
              "2022-03-31  173200.949300  \n",
              "2022-03-30  241950.806000  \n",
              "2022-03-29  200107.724500  \n",
              "2022-03-28  721785.274400  \n",
              "\n",
              "[1055 rows x 7 columns]"
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-29fe3326-ce50-4f9c-842f-c0dae882b94b\" class=\"colab-df-container\">\n",
              "    <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>symbol</th>\n",
              "      <th>open</th>\n",
              "      <th>high</th>\n",
              "      <th>low</th>\n",
              "      <th>close</th>\n",
              "      <th>Volume BTC</th>\n",
              "      <th>Volume USDT</th>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>date</th>\n",
              "      <th></th>\n",
              "      <th></th>\n",
              "      <th></th>\n",
              "      <th></th>\n",
              "      <th></th>\n",
              "      <th></th>\n",
              "      <th></th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>2025-02-14</th>\n",
              "      <td>BTC/USDT</td>\n",
              "      <td>96683.00</td>\n",
              "      <td>96683.00</td>\n",
              "      <td>96633.00</td>\n",
              "      <td>96633.00</td>\n",
              "      <td>0.002950</td>\n",
              "      <td>285.077013</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2025-02-13</th>\n",
              "      <td>BTC/USDT</td>\n",
              "      <td>97785.00</td>\n",
              "      <td>98011.00</td>\n",
              "      <td>95447.00</td>\n",
              "      <td>96474.00</td>\n",
              "      <td>8.819154</td>\n",
              "      <td>850819.080400</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2025-02-12</th>\n",
              "      <td>BTC/USDT</td>\n",
              "      <td>95800.00</td>\n",
              "      <td>97964.00</td>\n",
              "      <td>94313.00</td>\n",
              "      <td>97632.00</td>\n",
              "      <td>4.125552</td>\n",
              "      <td>402785.894800</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2025-02-11</th>\n",
              "      <td>BTC/USDT</td>\n",
              "      <td>97442.00</td>\n",
              "      <td>98452.00</td>\n",
              "      <td>94908.00</td>\n",
              "      <td>95630.00</td>\n",
              "      <td>3.253818</td>\n",
              "      <td>311162.592400</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2025-02-10</th>\n",
              "      <td>BTC/USDT</td>\n",
              "      <td>96656.00</td>\n",
              "      <td>98294.00</td>\n",
              "      <td>95400.00</td>\n",
              "      <td>97393.00</td>\n",
              "      <td>2.997725</td>\n",
              "      <td>291957.420200</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>...</th>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2022-04-01</th>\n",
              "      <td>BTC/USDT</td>\n",
              "      <td>45430.13</td>\n",
              "      <td>46667.00</td>\n",
              "      <td>44333.00</td>\n",
              "      <td>46317.25</td>\n",
              "      <td>4.878738</td>\n",
              "      <td>225969.738300</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2022-03-31</th>\n",
              "      <td>BTC/USDT</td>\n",
              "      <td>47171.09</td>\n",
              "      <td>47560.25</td>\n",
              "      <td>45252.20</td>\n",
              "      <td>45501.26</td>\n",
              "      <td>3.806509</td>\n",
              "      <td>173200.949300</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2022-03-30</th>\n",
              "      <td>BTC/USDT</td>\n",
              "      <td>47424.79</td>\n",
              "      <td>47667.00</td>\n",
              "      <td>46623.10</td>\n",
              "      <td>46993.50</td>\n",
              "      <td>5.148602</td>\n",
              "      <td>241950.806000</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2022-03-29</th>\n",
              "      <td>BTC/USDT</td>\n",
              "      <td>47126.56</td>\n",
              "      <td>48031.97</td>\n",
              "      <td>46982.10</td>\n",
              "      <td>47444.94</td>\n",
              "      <td>4.217683</td>\n",
              "      <td>200107.724500</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2022-03-28</th>\n",
              "      <td>BTC/USDT</td>\n",
              "      <td>47000.00</td>\n",
              "      <td>48188.44</td>\n",
              "      <td>46712.59</td>\n",
              "      <td>47107.25</td>\n",
              "      <td>15.322170</td>\n",
              "      <td>721785.274400</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "<p>1055 rows × 7 columns</p>\n",
              "</div>\n",
              "    <div class=\"colab-df-buttons\">\n",
              "\n",
              "  <div class=\"colab-df-container\">\n",
              "    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-29fe3326-ce50-4f9c-842f-c0dae882b94b')\"\n",
              "            title=\"Convert this dataframe to an interactive table.\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n",
              "    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n",
              "  </svg>\n",
              "    </button>\n",
              "\n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    .colab-df-buttons div {\n",
              "      margin-bottom: 4px;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "    <script>\n",
              "      const buttonEl =\n",
              "        document.querySelector('#df-29fe3326-ce50-4f9c-842f-c0dae882b94b button.colab-df-convert');\n",
              "      buttonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "      async function convertToInteractive(key) {\n",
              "        const element = document.querySelector('#df-29fe3326-ce50-4f9c-842f-c0dae882b94b');\n",
              "        const dataTable =\n",
              "          await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                    [key], {});\n",
              "        if (!dataTable) return;\n",
              "\n",
              "        const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "          + ' to learn more about interactive tables.';\n",
              "        element.innerHTML = '';\n",
              "        dataTable['output_type'] = 'display_data';\n",
              "        await google.colab.output.renderOutput(dataTable, element);\n",
              "        const docLink = document.createElement('div');\n",
              "        docLink.innerHTML = docLinkHtml;\n",
              "        element.appendChild(docLink);\n",
              "      }\n",
              "    </script>\n",
              "  </div>\n",
              "\n",
              "\n",
              "<div id=\"df-6bd0d39d-3add-4885-b99c-40075e04fbad\">\n",
              "  <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-6bd0d39d-3add-4885-b99c-40075e04fbad')\"\n",
              "            title=\"Suggest charts\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "     width=\"24px\">\n",
              "    <g>\n",
              "        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n",
              "    </g>\n",
              "</svg>\n",
              "  </button>\n",
              "\n",
              "<style>\n",
              "  .colab-df-quickchart {\n",
              "      --bg-color: #E8F0FE;\n",
              "      --fill-color: #1967D2;\n",
              "      --hover-bg-color: #E2EBFA;\n",
              "      --hover-fill-color: #174EA6;\n",
              "      --disabled-fill-color: #AAA;\n",
              "      --disabled-bg-color: #DDD;\n",
              "  }\n",
              "\n",
              "  [theme=dark] .colab-df-quickchart {\n",
              "      --bg-color: #3B4455;\n",
              "      --fill-color: #D2E3FC;\n",
              "      --hover-bg-color: #434B5C;\n",
              "      --hover-fill-color: #FFFFFF;\n",
              "      --disabled-bg-color: #3B4455;\n",
              "      --disabled-fill-color: #666;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart {\n",
              "    background-color: var(--bg-color);\n",
              "    border: none;\n",
              "    border-radius: 50%;\n",
              "    cursor: pointer;\n",
              "    display: none;\n",
              "    fill: var(--fill-color);\n",
              "    height: 32px;\n",
              "    padding: 0;\n",
              "    width: 32px;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart:hover {\n",
              "    background-color: var(--hover-bg-color);\n",
              "    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "    fill: var(--button-hover-fill-color);\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart-complete:disabled,\n",
              "  .colab-df-quickchart-complete:disabled:hover {\n",
              "    background-color: var(--disabled-bg-color);\n",
              "    fill: var(--disabled-fill-color);\n",
              "    box-shadow: none;\n",
              "  }\n",
              "\n",
              "  .colab-df-spinner {\n",
              "    border: 2px solid var(--fill-color);\n",
              "    border-color: transparent;\n",
              "    border-bottom-color: var(--fill-color);\n",
              "    animation:\n",
              "      spin 1s steps(1) infinite;\n",
              "  }\n",
              "\n",
              "  @keyframes spin {\n",
              "    0% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "      border-left-color: var(--fill-color);\n",
              "    }\n",
              "    20% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    30% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    40% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    60% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    80% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "    90% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "  }\n",
              "</style>\n",
              "\n",
              "  <script>\n",
              "    async function quickchart(key) {\n",
              "      const quickchartButtonEl =\n",
              "        document.querySelector('#' + key + ' button');\n",
              "      quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n",
              "      quickchartButtonEl.classList.add('colab-df-spinner');\n",
              "      try {\n",
              "        const charts = await google.colab.kernel.invokeFunction(\n",
              "            'suggestCharts', [key], {});\n",
              "      } catch (error) {\n",
              "        console.error('Error during call to suggestCharts:', error);\n",
              "      }\n",
              "      quickchartButtonEl.classList.remove('colab-df-spinner');\n",
              "      quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n",
              "    }\n",
              "    (() => {\n",
              "      let quickchartButtonEl =\n",
              "        document.querySelector('#df-6bd0d39d-3add-4885-b99c-40075e04fbad button');\n",
              "      quickchartButtonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "    })();\n",
              "  </script>\n",
              "</div>\n",
              "\n",
              "  <div id=\"id_8aac9fc0-b251-4f45-ade9-5fd25cca0e00\">\n",
              "    <style>\n",
              "      .colab-df-generate {\n",
              "        background-color: #E8F0FE;\n",
              "        border: none;\n",
              "        border-radius: 50%;\n",
              "        cursor: pointer;\n",
              "        display: none;\n",
              "        fill: #1967D2;\n",
              "        height: 32px;\n",
              "        padding: 0 0 0 0;\n",
              "        width: 32px;\n",
              "      }\n",
              "\n",
              "      .colab-df-generate:hover {\n",
              "        background-color: #E2EBFA;\n",
              "        box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "        fill: #174EA6;\n",
              "      }\n",
              "\n",
              "      [theme=dark] .colab-df-generate {\n",
              "        background-color: #3B4455;\n",
              "        fill: #D2E3FC;\n",
              "      }\n",
              "\n",
              "      [theme=dark] .colab-df-generate:hover {\n",
              "        background-color: #434B5C;\n",
              "        box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "        filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "        fill: #FFFFFF;\n",
              "      }\n",
              "    </style>\n",
              "    <button class=\"colab-df-generate\" onclick=\"generateWithVariable('data')\"\n",
              "            title=\"Generate code using this dataframe.\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "       width=\"24px\">\n",
              "    <path d=\"M7,19H8.4L18.45,9,17,7.55,7,17.6ZM5,21V16.75L18.45,3.32a2,2,0,0,1,2.83,0l1.4,1.43a1.91,1.91,0,0,1,.58,1.4,1.91,1.91,0,0,1-.58,1.4L9.25,21ZM18.45,9,17,7.55Zm-12,3A5.31,5.31,0,0,0,4.9,8.1,5.31,5.31,0,0,0,1,6.5,5.31,5.31,0,0,0,4.9,4.9,5.31,5.31,0,0,0,6.5,1,5.31,5.31,0,0,0,8.1,4.9,5.31,5.31,0,0,0,12,6.5,5.46,5.46,0,0,0,6.5,12Z\"/>\n",
              "  </svg>\n",
              "    </button>\n",
              "    <script>\n",
              "      (() => {\n",
              "      const buttonEl =\n",
              "        document.querySelector('#id_8aac9fc0-b251-4f45-ade9-5fd25cca0e00 button.colab-df-generate');\n",
              "      buttonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "      buttonEl.onclick = () => {\n",
              "        google.colab.notebook.generateWithVariable('data');\n",
              "      }\n",
              "      })();\n",
              "    </script>\n",
              "  </div>\n",
              "\n",
              "    </div>\n",
              "  </div>\n"
            ],
            "application/vnd.google.colaboratory.intrinsic+json": {
              "type": "dataframe",
              "variable_name": "data",
              "summary": "{\n  \"name\": \"data\",\n  \"rows\": 1055,\n  \"fields\": [\n    {\n      \"column\": \"date\",\n      \"properties\": {\n        \"dtype\": \"date\",\n        \"min\": \"2022-03-28 00:00:00\",\n        \"max\": \"2025-02-14 00:00:00\",\n        \"num_unique_values\": 1055,\n        \"samples\": [\n          \"2024-05-30 00:00:00\",\n          \"2022-11-05 00:00:00\",\n          \"2022-10-22 00:00:00\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"symbol\",\n      \"properties\": {\n        \"dtype\": \"category\",\n        \"num_unique_values\": 1,\n        \"samples\": [\n          \"BTC/USDT\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"open\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 24138.08283472028,\n        \"min\": 15781.0,\n        \"max\": 106207.0,\n        \"num_unique_values\": 1041,\n        \"samples\": [\n          63353.0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"high\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 24650.67645103099,\n        \"min\": 16286.0,\n        \"max\": 109557.0,\n        \"num_unique_values\": 1035,\n        \"samples\": [\n          65674.0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"low\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 23616.81383442509,\n        \"min\": 15000.0,\n        \"max\": 105336.0,\n        \"num_unique_values\": 1027,\n        \"samples\": [\n          37186.0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"close\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 24189.64584797552,\n        \"min\": 15789.0,\n        \"max\": 106200.0,\n        \"num_unique_values\": 1045,\n        \"samples\": [\n          16920.0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Volume BTC\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 44.411123409081135,\n        \"min\": 0.0029501,\n        \"max\": 349.8066224,\n        \"num_unique_values\": 1055,\n        \"samples\": [\n          17.31686007\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Volume USDT\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 1775533.3882848637,\n        \"min\": 285.0770133,\n        \"max\": 16090181.1,\n        \"num_unique_values\": 1055,\n        \"samples\": [\n          1184057.624\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    }\n  ]\n}"
            }
          },
          "metadata": {},
          "execution_count": 8
        }
      ]
    }
  ]
}